phpcassa
========
phpcassa is a PHP client library for [Apache Cassandra](http://cassandra.apache.org).

* Compatible with Cassandra 0.7 and 0.8
* Optional C extension for improved performance

phpcassa is open source under the [MIT license](http://www.opensource.org/licenses/mit-license.php).

Documentation
-------------

While this README includes some useful information, the official and more
thorough documentation can be found here:

[http://thobbs.github.com/phpcassa](http://thobbs.github.com/phpcassa)

Opening Connections
-------------------

    $pool = new ConnectionPool('Keyspace1');

or

    $pool = new ConnectionPool('Keyspace1', array('localhost'));

Create a column family object
-----------------------------

    $users = new ColumnFamily($pool, 'Standard1'); // ColumnFamily
    $super = new ColumnFamily($pool, 'Super1'); // SuperColumnFamily

Inserting
---------

    $users->insert('key', array('column1' => 'value1', 'column2' => 'value2'));

Querying
--------

    $users->get('key'); 
    $users->multiget(array('key1', 'key2'));

Removing
--------

    $users->remove('key1'); // removes whole row
    $users->remove('key1', 'column1'); // removes 'column1'

Working with CompositeType
--------------------------

Suppose we have a column family named "composite" with key_validation_class=UTF8Type,
 comparator=Composite(LongType, UTF8Type) and default_validation_class=UTF8Type

    // inserting a row with key is "123" and two columns (123, "111") => "1" and (124, "112") => "2"
    $composite->insert("123", array(serialize(array(123, "111")) => "1", serialize(array(124, "112")) => "1"));
    // getting all columns
    $composite->get("123");
    // getting a specific column
    $composite->get("123", array(serialize(array(123, "111"))));
    // getting all columns that have first component is greater than or equal 123
    $composite->get("123", null, serialize(array(123)));
    // getting all columns that have first component between 123 and 124 and the second component smaller than or equal 112
    $composite->get("123", null, serialize(array(123)), serialize(array(123, array("112", TRUE))));
    // getting all columns that have first component between 123 and 124 and the second component smaller than 112
    $composite->get("123", null, serialize(array(123)), serialize(array(123, array("112", FALSE))));
    // removing column (123, "111")
    $composite->get("123", array(serialize(array(123, "111"))));


Other
-----

    $users->get_count('key1'); // counts the number of columns in row 'key1'
    $users->get_range('key1', 'key9'); // gets all rows with keys between '1' and '9'

Using the C Extension
---------------------

The C extension is crucial for phpcassa's performance.

You need to configure and make to be able to use the C extension.

    cd thrift/ext/thrift_protocol
    phpize
    ./configure
    make
    sudo make install

Add the following line to your php.ini file:

    extension=thrift_protocol.so

Getting Help
------------

* Mailing list: [phpcassa on google groups](http://groups.google.com/group/phpcassa)
* IRC: Channel #cassandra on irc.freenode.net
